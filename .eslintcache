[{"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\index.js":"1","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\reportWebVitals.js":"2","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\store\\index.js":"3","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\reducers\\reducer.js":"4","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\root\\Root.js":"5","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\routing\\index.js":"6","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\actions\\actionTypes.js":"7","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\actions\\index.js":"8","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\OrdersTable.js":"9","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\templates\\NavBarTemplates.js":"10","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\nav\\NavBar.js":"11","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\AddProductForm.js":"12","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\data\\index.js":"13","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\Modal.js":"14","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\EditOrder.js":"15","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\views\\AddOrder.js":"16","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\OrderForm.js":"17","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\productsComponents\\DisplayProductsOrder.js":"18","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\productsComponents\\EditProductKeyForm.js":"19","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\theme\\GlobalStyle.js":"20","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\views\\Orders.js":"21","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\firebase\\firestoreUtils.js":"22","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\firebase\\firebaseConfig.js":"23","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\EditOrderForm.js":"24"},{"size":603,"mtime":1610110959666,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":234,"mtime":1610455619110,"results":"28","hashOfConfig":"26"},{"size":6573,"mtime":1614949072540,"results":"29","hashOfConfig":"26"},{"size":949,"mtime":1613654243349,"results":"30","hashOfConfig":"26"},{"size":560,"mtime":1614946116259,"results":"31","hashOfConfig":"26"},{"size":429,"mtime":1614949035678,"results":"32","hashOfConfig":"26"},{"size":1497,"mtime":1614949049121,"results":"33","hashOfConfig":"26"},{"size":17919,"mtime":1615248772044,"results":"34","hashOfConfig":"26"},{"size":365,"mtime":1612895692879,"results":"35","hashOfConfig":"26"},{"size":1471,"mtime":1612983397078,"results":"36","hashOfConfig":"26"},{"size":4164,"mtime":1613743014853,"results":"37","hashOfConfig":"26"},{"size":250,"mtime":1612268826334,"results":"38","hashOfConfig":"26"},{"size":1698,"mtime":1612904378123,"results":"39","hashOfConfig":"26"},{"size":445,"mtime":1614085705032,"results":"40","hashOfConfig":"26"},{"size":985,"mtime":1612902222864,"results":"41","hashOfConfig":"26"},{"size":10064,"mtime":1615248738279,"results":"42","hashOfConfig":"26"},{"size":7578,"mtime":1613743535122,"results":"43","hashOfConfig":"26"},{"size":3616,"mtime":1614345438808,"results":"44","hashOfConfig":"26"},{"size":242,"mtime":1612903669413,"results":"45","hashOfConfig":"26"},{"size":748,"mtime":1612901899111,"results":"46","hashOfConfig":"26"},{"size":791,"mtime":1614948269673,"results":"47","hashOfConfig":"26"},{"size":502,"mtime":1615252696747,"results":"48","hashOfConfig":"26"},{"size":10880,"mtime":1615250398201,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"kurqm",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\index.js",[],["106","107"],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\reportWebVitals.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\store\\index.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\reducers\\reducer.js",["108","109","110","111","112"],"import { saveEditProductKey, selectOrder } from \"../actions\";\r\nimport { actionTypes } from \"../actions/actionTypes\";\r\n\r\n// {\r\n//   orderId: 1,\r\n//   clientName: \"\",\r\n//   payment: 2000,\r\n//   paid: false,\r\n//   deliveryDate: \"\",\r\n//   paymentDate: \"\",\r\n//   currency: \"\",\r\n//   priority: \"low\",\r\n//   products: [\r\n//     {\r\n//       productId: 1,\r\n//       productName: \"first\",\r\n//       productPrice: 20,\r\n//       productCategory: \"PC\",\r\n//       productQuantity: 1,\r\n//     },\r\n//   ],\r\n// },\r\n\r\nconst initialState = {\r\n  orders: [],\r\n  open: false,\r\n  selectedOrder: null,\r\n  isProductEditing: false,\r\n  selectedProductKeyEditAndId: {\r\n    id: null,\r\n    key: \"\",\r\n  },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case actionTypes.GET_ORDERS:\r\n      return {\r\n        ...state,\r\n        orders: payload,\r\n      };\r\n\r\n    case actionTypes.ADD_ORDER:\r\n      return {\r\n        ...state,\r\n        orders: [...state.orders, payload],\r\n      };\r\n    case actionTypes.DELETE_ORDERS:\r\n      const filteredOrders = state.orders.filter(\r\n        (el) => !payload.includes(el.orderId)\r\n      );\r\n      return {\r\n        ...state,\r\n        orders: [...filteredOrders],\r\n      };\r\n    case actionTypes.OPEN_MODAL:\r\n      return {\r\n        ...state,\r\n        open: payload,\r\n      };\r\n    case actionTypes.SELECT_ORDER:\r\n      const selectedObject = state.orders.find((el) => el.orderId === payload);\r\n      return {\r\n        ...state,\r\n        selectedOrder: { ...selectedObject },\r\n      };\r\n\r\n    case actionTypes.ADD_PRODUCT:\r\n      const mappedOrders = state.orders.map((el) => {\r\n        if (el.orderId === state.selectedOrder.orderId) {\r\n          el.products = [...el.products, payload];\r\n        }\r\n        return el;\r\n      });\r\n      return {\r\n        ...state,\r\n        orders: [...mappedOrders],\r\n      };\r\n\r\n    case actionTypes.EDIT_ORDER:\r\n      const ordersAfterMaping = state.orders.map((el) => {\r\n        if (el.orderId === state.selectedOrder.orderId) {\r\n          el = {\r\n            orderId: el.orderId,\r\n            products: el.products,\r\n            ...payload,\r\n          };\r\n        }\r\n        return el;\r\n      });\r\n      return {\r\n        ...state,\r\n        orders: [...ordersAfterMaping],\r\n      };\r\n\r\n    case actionTypes.REMOVE_PRODUCT:\r\n      const orderAfterRemoveProduct = state.orders.map((el) => {\r\n        if (el.orderId === state.selectedOrder.orderId) {\r\n          el.products = el.products.filter((el) => {\r\n            return el.productId !== payload;\r\n          });\r\n          // el.products = [...filteredProducts];\r\n        }\r\n        return el;\r\n      });\r\n\r\n      const selectedOrderProductsAfterRemoving = state.selectedOrder.products.filter(\r\n        (el) => {\r\n          return el.productId !== payload;\r\n        }\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        orders: [...orderAfterRemoveProduct],\r\n        selectedOrder: {\r\n          ...state.selectedOrder,\r\n          products: selectedOrderProductsAfterRemoving,\r\n        },\r\n      };\r\n\r\n    case actionTypes.EDIT_PRODUCT:\r\n      const orderAfterEditProduct = state.orders.map((el) => {\r\n        if (el.orderId === state.selectedOrder.orderId) {\r\n        }\r\n      });\r\n\r\n    case actionTypes.SELECT_PRODUCT_KEY_TO_EDIT:\r\n      return {\r\n        ...state,\r\n        selectedProductKeyEditAndId: {\r\n          id: payload.id,\r\n          key: payload.key,\r\n        },\r\n      };\r\n\r\n    // case actionTypes.SAVE_PRODUCT_KEY_EDIT:\r\n    //   const savedAfterEditing = state.orders.map((el) => {\r\n    //     el.products.map((el) => {\r\n    //       if (el.productName === payload.keyType) {\r\n    //         el.productName = payload.newKeyValue;\r\n    //       } else if (el.productPrice === payload.keyType) {\r\n    //         el.productPrice = parseInt(payload.newKeyValue);\r\n    //       } else if (el.productCategory === payload.keyType) {\r\n    //         el.productCategory = payload.newKeyValue;\r\n    //       } else if (el.productQuantity === payload.keyType) {\r\n    //         el.productQuantity = parseInt(payload.newKeyValue);\r\n    //       }\r\n\r\n    //       // el[payload.keyType] = payload.newKeyValue;\r\n    //       return el;\r\n    //     });\r\n    //     return el;\r\n    //   });\r\n    //   const savedSelectedAfterEditing = state.selectedOrder.products.map(\r\n    //     (el) => {\r\n    //       if (el.productName === payload.keyType) {\r\n    //         el.productName = payload.newKeyValue;\r\n    //       } else if (el.productPrice === payload.keyType) {\r\n    //         el.productPrice = parseInt(payload.newKeyValue);\r\n    //       } else if (el.productCategory === payload.keyType) {\r\n    //         el.productCategory = payload.newKeyValue;\r\n    //       } else if (el.productQuantity === payload.keyType) {\r\n    //         el.productQuantity = parseInt(payload.newKeyValue);\r\n    //       }\r\n    //       return el;\r\n    //     }\r\n    //   );\r\n\r\n    //   return {\r\n    //     ...state,\r\n    //     orders: [...savedAfterEditing],\r\n    //     selectedOrder: {\r\n    //       ...state.selectedOrder,\r\n    //       products: savedSelectedAfterEditing,\r\n    //     },\r\n    //   };\r\n\r\n    case actionTypes.SAVE_PRODUCT_KEY_EDIT:\r\n      const ordersAfterEditingSingleProduct = state.orders.map((order) => {\r\n        if (order.orderId === state.selectedOrder.orderId) {\r\n          order.products = order.products.map((product) => {\r\n            if (product.productId === payload.productId) {\r\n              product[payload.keyType] = payload.newKeyValue;\r\n            }\r\n            return product;\r\n          });\r\n        }\r\n        return order;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        orders: [...ordersAfterEditingSingleProduct],\r\n        // Zmiana key na pustego stringa żeby nie pasował do żadnego warunku w DisplayProductsOrder,\r\n        // zeby save zamknelo edytowanie\r\n        selectedProductKeyEditAndId: {\r\n          id: payload.id,\r\n          key: \"\",\r\n        },\r\n      };\r\n\r\n    case \"CALCULATE_PAYMENT\":\r\n      const calculatedTotalPrice = state.orders.map((el) => {\r\n        if (el.orderId === state.selectedOrder.orderId) {\r\n          let totalPrice = 0;\r\n          el.products.forEach((product) => {\r\n            totalPrice =\r\n              totalPrice + product.productPrice * product.productQuantity;\r\n          });\r\n          el.payment = totalPrice;\r\n        }\r\n        return el;\r\n      });\r\n      return {\r\n        ...state,\r\n        orders: [...calculatedTotalPrice],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\root\\Root.js",["113"],"import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getOrders } from \"../actions\";\r\nimport { ordersCollection } from \"../firebase/firestoreUtils\";\r\nimport Router from \"../routing\";\r\nimport GlobalStyle from \"../theme/GlobalStyle\";\r\n\r\nconst Root = ({ getOrders }) => {\r\n  useEffect(() => {\r\n    const subscribe = ordersCollection.onSnapshot((snapshot) => {\r\n      const dateFromOrdersCollection = snapshot.docs.map((doc) => {\r\n        console.log(doc);\r\n        return {\r\n          orderId: doc.id,\r\n          ...doc.data(),\r\n        };\r\n      });\r\n\r\n      getOrders(dateFromOrdersCollection);\r\n    });\r\n    return () => {\r\n      subscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Router />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getOrders: (orders) => dispatch(getOrders(orders)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Root);\r\n","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\routing\\index.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\actions\\actionTypes.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\actions\\index.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\OrdersTable.js",["114","115"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  deleteOrders,\r\n  openModal,\r\n  closeAddProductModal,\r\n  selectOrder,\r\n  calculatePayment,\r\n} from \"../actions\";\r\nimport { AddCircleOutline, Visibility, Edit } from \"@material-ui/icons\";\r\nimport Modal from \"./Modal\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { deleteOrderFromFirestore } from \"../firebase/firestoreUtils\";\r\n\r\n// function createData(name, calories, fat, carbs, protein) {\r\n//   return { name, calories, fat, carbs, protein };\r\n// }\r\n\r\n// const rows = [\r\n//   createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n//   createData(\"Donut\", 452, 25.0, 51, 4.9),\r\n//   createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n//   createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n//   createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n//   createData(\"Honeycomb\", 408, 3.2, 87, 6.5),\r\n//   createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n//   createData(\"Jelly Bean\", 375, 0.0, 94, 0.0),\r\n//   createData(\"KitKat\", 518, 26.0, 65, 7.0),\r\n//   createData(\"Lollipop\", 392, 0.2, 98, 0.0),\r\n//   createData(\"Marshmallow\", 318, 0, 81, 2.0),\r\n//   createData(\"Nougat\", 360, 19.0, 9, 37.0),\r\n//   createData(\"Oreo\", 437, 18.0, 63, 4.0),\r\n// ];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"id\",\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: \"Id\",\r\n  },\r\n  {\r\n    id: \"clientName\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Client Name\",\r\n  },\r\n  { id: \"payment\", numeric: true, disablePadding: false, label: \"Payment\" },\r\n  { id: \"paid\", numeric: true, disablePadding: false, label: \"Paid\" },\r\n  { id: \"currency\", numeric: true, disablePadding: false, label: \"Currency\" },\r\n  {\r\n    id: \"priority\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Priority\",\r\n  },\r\n  {\r\n    id: \"paymentDate\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Payment Date\",\r\n  },\r\n  {\r\n    id: \"deliveryDate\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Delivery Date\",\r\n  },\r\n  {\r\n    id: \"addProduct\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Add Product\",\r\n  },\r\n  {\r\n    id: \"showProducts\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Show Products\",\r\n  },\r\n  {\r\n    id: \"editOrder\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Edit Order\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const {\r\n    numSelected,\r\n    deleteOrders,\r\n    selectedOrders,\r\n    clearSelectedOrders,\r\n  } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        ></Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon\r\n              onClick={() => {\r\n                deleteOrders(selectedOrders);\r\n                deleteOrderFromFirestore(selectedOrders);\r\n\r\n                clearSelectedOrders();\r\n              }}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  paper: {\r\n    width: \"95%\",\r\n    marginBottom: theme.spacing(2),\r\n    borderRadius: \"20px\",\r\n\r\n    boxShadow: \"5px 5px 15px 5px rgba(0, 0, 0, 0.10)\",\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nconst OrdersTable = ({\r\n  orders,\r\n  deleteOrders,\r\n  openModal,\r\n  open,\r\n  selectOrder,\r\n  calculatePayment,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [orderBy, setOrderBy] = useState(\"payment\");\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [modalType, setModalType] = useState(\"addProduct\");\r\n\r\n  const handleOpen = () => {\r\n    openModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    openModal(false);\r\n    calculatePayment();\r\n  };\r\n\r\n  const clearSelectedOrders = () => {\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = orders.map((order) => order.orderId);\r\n      setSelected(newSelecteds);\r\n      console.log(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n    console.log(selected);\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, orders.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar\r\n          numSelected={selected.length}\r\n          selectedOrders={selected}\r\n          deleteOrders={deleteOrders}\r\n          clearSelectedOrders={clearSelectedOrders}\r\n        />\r\n\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? \"small\" : \"medium\"}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={orders.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(orders, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((order, index) => {\r\n                  const {\r\n                    orderId,\r\n                    payment,\r\n                    clientName,\r\n                    paymentDate,\r\n                    deliveryDate,\r\n                    currency,\r\n                    priority,\r\n                    paid,\r\n                  } = order;\r\n                  const isItemSelected = isSelected(orderId);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  const pamentDateArray = paymentDate.split(\"/\");\r\n                  const paymentDateToDisplay = `${pamentDateArray[2]}/${pamentDateArray[1]}/${pamentDateArray[0]} `;\r\n                  const deliveryDateArray = deliveryDate.split(\"/\");\r\n                  const deliveryDateToDisplay = `${deliveryDateArray[2]}/${deliveryDateArray[1]}/${deliveryDateArray[0]} `;\r\n                  const priorityToDisplay =\r\n                    priority === \"a\"\r\n                      ? \"low\"\r\n                      : priority === \"b\"\r\n                      ? \"mid\"\r\n                      : \"high\";\r\n\r\n                  console.log(deliveryDateToDisplay);\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={orderId}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          onChange={(event) => handleClick(event, orderId)}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {orderId}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{clientName}</TableCell>\r\n                      <TableCell align=\"right\">{payment}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {paid === \"true\" ? <DoneIcon /> : <CloseIcon />}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{currency}</TableCell>\r\n                      <TableCell align=\"right\">{priorityToDisplay}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {paid === \"true\" ? paymentDateToDisplay : \"\"}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {deliveryDateToDisplay}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Tooltip title=\"Add Product\">\r\n                          <IconButton\r\n                            aria-label=\"Add Product\"\r\n                            onClick={() => {\r\n                              selectOrder(orderId);\r\n                              setModalType(\"addProduct\");\r\n                              handleOpen();\r\n                            }}\r\n                          >\r\n                            <AddCircleOutline />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Tooltip title=\"Show Products\">\r\n                          <IconButton\r\n                            aria-label=\"Show Products\"\r\n                            onClick={() => {\r\n                              selectOrder(orderId);\r\n                              setModalType(\"showProduct\");\r\n                              handleOpen();\r\n                            }}\r\n                          >\r\n                            <Visibility />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Tooltip title=\"Show Products\">\r\n                          <IconButton\r\n                            aria-label=\"Show Products\"\r\n                            onClick={() => {\r\n                              selectOrder(orderId);\r\n                              setModalType(\"editOrder\");\r\n                              handleOpen();\r\n                            }}\r\n                          >\r\n                            <Edit />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={orders.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n      <Modal open={open} handleClose={handleClose} modalType={modalType} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  orders: state.orders,\r\n  open: state.open,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteOrders: (selectedOrders) => dispatch(deleteOrders(selectedOrders)),\r\n  openModal: (openState) => dispatch(openModal(openState)),\r\n  selectOrder: (orderId) => dispatch(selectOrder(orderId)),\r\n  calculatePayment: () => dispatch(calculatePayment()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersTable);\r\n","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\templates\\NavBarTemplates.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\nav\\NavBar.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\AddProductForm.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\data\\index.js",[],["116","117"],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\Modal.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\EditOrder.js",["118"],"import React from \"react\";\r\nimport OrderForm from \"./OrderForm\";\r\nimport styled from \"styled-components\";\r\nimport EditOrderForm from \"./EditOrderForm\";\r\n\r\nconst StyledH2 = styled.h2`\r\n  margin-bottom: 1rem;\r\n\r\n  text-align: center;\r\n`;\r\n\r\nconst EditOrder = ({ handleClose }) => {\r\n  return (\r\n    <div>\r\n      <StyledH2>Edit Order</StyledH2>\r\n      <EditOrderForm handleClose={handleClose} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditOrder;\r\n","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\views\\AddOrder.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\OrderForm.js",["119","120","121","122"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"date-fns\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { editOrder } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport OrdersTable from \"./OrdersTable\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { addOrder } from \"../firebase/firestoreUtils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      minWidth: \"25ch\",\r\n    },\r\n  },\r\n  // root: {\r\n  //   flexGrow: 1,\r\n  // },\r\n  formControl: {\r\n    margin: theme.spacing(0),\r\n    minWidth: 210,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst OrderForm = ({ orderFormType, editOrder, handleClose }) => {\r\n  const classes = useStyles();\r\n  const [selectedPaymentDate, setSelectedPaymentDate] = useState(new Date());\r\n  const [selectedDeliveryDate, setSelectedDeliveryDate] = useState(new Date());\r\n  const [currency, setCurrency] = useState(\"\");\r\n  const [priority, setPriority] = useState(\"\");\r\n  const [paid, setPaid] = useState(\"false\");\r\n  const [pamentDateVisible, setPamentDateVisible] = useState(false);\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  const handlePaidChange = (e) => {\r\n    setPaid(e.target.value);\r\n    console.log(paid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPamentDateVisible(!pamentDateVisible);\r\n  }, [paid]);\r\n\r\n  const handleCurrencyChange = (event) => {\r\n    setCurrency(event.target.value);\r\n  };\r\n\r\n  const handlePriorityChange = (event) => {\r\n    setPriority(event.target.value);\r\n  };\r\n\r\n  const handlePaymentDateChange = (date) => {\r\n    setSelectedPaymentDate(date);\r\n  };\r\n\r\n  const handleDeliveryDateChange = (date) => {\r\n    setSelectedDeliveryDate(date);\r\n  };\r\n\r\n  const handleOrderForm = (e) => {\r\n    e.preventDefault();\r\n\r\n    const formattedPaymentDate = moment(selectedPaymentDate).format(\r\n      \"yyyy/MM/DD\"\r\n    );\r\n    const formattedDeliveryDate = moment(selectedDeliveryDate).format(\r\n      \"yyyy/MM/DD\"\r\n    );\r\n\r\n    const formatedPriority =\r\n      priority === \"high\" ? \"c\" : priority === \"mid\" ? \"b\" : \"a\";\r\n\r\n    const clientName = e.target.clientName.value;\r\n    // const payment = e.target.payment.value;\r\n\r\n    if (orderFormType === \"addOrder\") {\r\n      const newOrder = {\r\n        clientName,\r\n        payment: 0,\r\n        currency,\r\n        paid,\r\n        priority: formatedPriority,\r\n        paymentDate: formattedPaymentDate,\r\n        deliveryDate: formattedDeliveryDate,\r\n        // orderId: uuidv4(),\r\n        products: [],\r\n      };\r\n\r\n      addOrder(newOrder);\r\n      // addOrder(newOrder);\r\n      setRedirect(true);\r\n    } else {\r\n      const editedOrder = {\r\n        clientName,\r\n        // payment,\r\n        currency,\r\n        paid,\r\n        priority: formatedPriority,\r\n        paymentDate: formattedPaymentDate,\r\n        deliveryDate: formattedDeliveryDate,\r\n      };\r\n      editOrder(editedOrder);\r\n      handleClose();\r\n      //miejsce na akcje\r\n    }\r\n\r\n    e.target.reset();\r\n    setCurrency(\"\");\r\n    setPriority(\"\");\r\n    setSelectedPaymentDate(new Date());\r\n    setSelectedDeliveryDate(new Date());\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <form onSubmit={handleOrderForm}>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            direction=\"column\"\r\n            spacing={3}\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                name=\"clientName\"\r\n                label=\"Client Name\"\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                name=\"payment\"\r\n                label=\"Payment\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n              />\r\n            </Grid> */}\r\n            <Grid item xs={12}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Currency\r\n                </InputLabel>\r\n\r\n                <Select\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={currency}\r\n                  onChange={handleCurrencyChange}\r\n                  label=\"Currency\"\r\n                >\r\n                  <MenuItem value=\"usd\">USD</MenuItem>\r\n                  <MenuItem value=\"eur\">EUR</MenuItem>\r\n                  <MenuItem value=\"pln\">PLN</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Priority\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={priority}\r\n                  onChange={handlePriorityChange}\r\n                  label=\"Priority\"\r\n                >\r\n                  <MenuItem value=\"low\">Low</MenuItem>\r\n                  <MenuItem value=\"mid\">Mid</MenuItem>\r\n                  <MenuItem value=\"high\">High</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Paid</FormLabel>\r\n\r\n                <RadioGroup\r\n                  aria-label=\"paid\"\r\n                  name=\"paid\"\r\n                  value={paid}\r\n                  onChange={handlePaidChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel\r\n                    value={\"true\"}\r\n                    control={<Radio />}\r\n                    label=\"Yes\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value={\"false\"}\r\n                    control={<Radio />}\r\n                    label=\"No\"\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              {pamentDateVisible ? (\r\n                <Grid item xs={12}>\r\n                  <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-dialog\"\r\n                    label=\"Delivery date\"\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={selectedDeliveryDate}\r\n                    onChange={handleDeliveryDateChange}\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              ) : (\r\n                <>\r\n                  <Grid item xs={12}>\r\n                    <KeyboardDatePicker\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Payment date\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      value={selectedPaymentDate}\r\n                      onChange={handlePaymentDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <KeyboardDatePicker\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Delivery date\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      value={selectedDeliveryDate}\r\n                      onChange={handleDeliveryDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </>\r\n              )}\r\n            </MuiPickersUtilsProvider>\r\n            <Grid item xs={12}>\r\n              <Button type=\"submit\" variant=\"outlined\">\r\n                {orderFormType === \"addOrder\" ? \"Add\" : \"Save\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n        {redirect ? <Redirect to=\"/orders-table\" /> : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  // addOrder: (newOrder) => dispatch(addOrder(newOrder)),\r\n  editOrder: (editedOrder) => dispatch(editOrder(editedOrder)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(OrderForm);\r\n\r\n// export default function RadioButtonsGroup() {\r\n//   const handlePaidChange = (event) => {\r\n//     setValue(event.target.value);\r\n//   };\r\n\r\n//   return (\r\n//     <FormControl component=\"fieldset\">\r\n//       <FormLabel component=\"legend\">Gender</FormLabel>\r\n//       <RadioGroup\r\n//         aria-label=\"gender\"\r\n//         name=\"gender1\"\r\n//         value={value}\r\n//         onChange={handlePaidChange}\r\n//       >\r\n//         <FormControlLabel value={false} control={<Radio />} label=\"Yes\" />\r\n//         <FormControlLabel value={true} control={<Radio />} label=\"No\" />\r\n//       </RadioGroup>\r\n//     </FormControl>\r\n//   );\r\n// }\r\n","C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\productsComponents\\DisplayProductsOrder.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\productsComponents\\EditProductKeyForm.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\theme\\GlobalStyle.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\views\\Orders.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\firebase\\firestoreUtils.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\firebase\\firebaseConfig.js",[],"C:\\Users\\jakub\\Desktop\\Projekty\\React\\admin_panel\\src\\components\\EditOrderForm.js",["123","124","125","126","127","128","129"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"date-fns\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { editOrder, openModal } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport OrdersTable from \"./OrdersTable\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { addOrder, editOrderFirebase } from \"../firebase/firestoreUtils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      minWidth: \"25ch\",\r\n    },\r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing(0),\r\n    minWidth: 210,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst EditOrderForm = ({ selectedOrder, closeModal }) => {\r\n  const {\r\n    clientName,\r\n    currency,\r\n    priority,\r\n    paid,\r\n    deliveryDate,\r\n    paymentDate,\r\n  } = selectedOrder;\r\n\r\n  const classes = useStyles();\r\n\r\n  const arrayOfDateToDisplay = paymentDate.split(\"/\");\r\n  arrayOfDateToDisplay.reverse();\r\n\r\n  const paymentMonth = parseInt(arrayOfDateToDisplay[1]) - 1;\r\n\r\n  const dateToDisplay = new Date(\r\n    arrayOfDateToDisplay[2],\r\n    `${paymentMonth}`,\r\n    arrayOfDateToDisplay[0]\r\n  );\r\n\r\n  const arrayOfDateToDisplay2 = deliveryDate.split(\"/\");\r\n  arrayOfDateToDisplay2.reverse();\r\n\r\n  const deliveryMonth = parseInt(arrayOfDateToDisplay2[1]) - 1;\r\n\r\n  const dateToDisplay2 = new Date(\r\n    arrayOfDateToDisplay2[2],\r\n    `${deliveryMonth}`,\r\n    arrayOfDateToDisplay2[0]\r\n  );\r\n\r\n  console.log(priority);\r\n\r\n  const [newSelectedPaymentDate, setNewSelectedPaymentDate] = useState(\r\n    dateToDisplay\r\n  );\r\n  const [newSelectedDeliveryDate, setNewSelectedDeliveryDate] = useState(\r\n    dateToDisplay2\r\n  );\r\n  const [newClientName, setNewClientName] = useState(clientName);\r\n  const [newCurrency, setNewCurrency] = useState(currency);\r\n  const [newPriority, setNewPriority] = useState(priority);\r\n  const [newPaid, setNewPaid] = useState(paid);\r\n  // const [pamentDateVisible, setPamentDateVisible] = useState(false);\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  const handlePaidChange = (e) => {\r\n    setNewPaid(e.target.value);\r\n    console.log(paid);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setPamentDateVisible(!pamentDateVisible);\r\n  // }, [paid]);\r\n\r\n  const handleCurrencyChange = (event) => {\r\n    setNewCurrency(event.target.value);\r\n  };\r\n\r\n  const handlePriorityChange = (event) => {\r\n    setNewPriority(event.target.value);\r\n  };\r\n\r\n  const handleClientNameChange = (event) => {\r\n    setNewClientName(event.target.value);\r\n  };\r\n\r\n  const handlePaymentDateChange = (date) => {\r\n    setNewSelectedPaymentDate(date);\r\n  };\r\n\r\n  const handleDeliveryDateChange = (date) => {\r\n    setNewSelectedDeliveryDate(date);\r\n  };\r\n\r\n  //   const handleOrderForm = (e) => {\r\n  //     e.preventDefault();\r\n\r\n  //     const clientName = e.target.clientName.value;\r\n  //     // const payment = e.target.payment.value;\r\n\r\n  //     if (orderFormType === \"addOrder\") {\r\n  //       const newOrder = {\r\n  //         clientName,\r\n  //         payment: 0,\r\n  //         currency,\r\n  //         paid,\r\n  //         priority,\r\n  //         paymentDate: formattedPaymentDate,\r\n  //         deliveryDate: formattedDeliveryDate,\r\n  //         // orderId: uuidv4(),\r\n  //         products: [],\r\n  //       };\r\n\r\n  //       addOrder(newOrder);\r\n  //       // addOrder(newOrder);\r\n  //       setRedirect(true);\r\n  //     } else {\r\n  //       const editedOrder = {\r\n  //         clientName,\r\n  //         // payment,\r\n  //         currency,\r\n  //         paid,\r\n  //         priority,\r\n  //         paymentDate: formattedPaymentDate,\r\n  //         deliveryDate: formattedDeliveryDate,\r\n  //       };\r\n  //       editOrder(editedOrder);\r\n  //       handleClose();\r\n  //       //miejsce na akcje\r\n  //     }\r\n\r\n  //     e.target.reset();\r\n  //     setCurrency(\"\");\r\n  //     setPriority(\"\");\r\n  //     setSelectedPaymentDate(new Date());\r\n  //     setSelectedDeliveryDate(new Date());\r\n  //   };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const formattedPaymentDate = moment(newSelectedPaymentDate).format(\r\n      \"yyyy/MM/DD\"\r\n    );\r\n    const formattedDeliveryDate = moment(newSelectedDeliveryDate).format(\r\n      \"yyyy/MM/DD\"\r\n    );\r\n\r\n    const order = {\r\n      clientName: newClientName,\r\n      currency: newCurrency,\r\n      priority: newPriority,\r\n      paid: newPaid,\r\n      paymentDate: formattedPaymentDate,\r\n      deliveryDate: formattedDeliveryDate,\r\n    };\r\n\r\n    editOrderFirebase(selectedOrder.orderId, order);\r\n    closeModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            direction=\"column\"\r\n            spacing={3}\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                name=\"clientName\"\r\n                label=\"Client Name\"\r\n                value={newClientName}\r\n                onChange={handleClientNameChange}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                name=\"payment\"\r\n                label=\"Payment\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n              />\r\n            </Grid> */}\r\n            <Grid item xs={12}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Currency\r\n                </InputLabel>\r\n\r\n                <Select\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={newCurrency}\r\n                  onChange={handleCurrencyChange}\r\n                  label=\"Currency\"\r\n                >\r\n                  <MenuItem value=\"usd\">USD</MenuItem>\r\n                  <MenuItem value=\"eur\">EUR</MenuItem>\r\n                  <MenuItem value=\"pln\">PLN</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Priority\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={newPriority}\r\n                  onChange={handlePriorityChange}\r\n                  label=\"Priority\"\r\n                >\r\n                  <MenuItem value=\"a\">Low</MenuItem>\r\n                  <MenuItem value=\"b\">Mid</MenuItem>\r\n                  <MenuItem value=\"c\">High</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Paid</FormLabel>\r\n\r\n                <RadioGroup\r\n                  aria-label=\"paid\"\r\n                  name=\"paid\"\r\n                  value={newPaid}\r\n                  onChange={handlePaidChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel\r\n                    value={\"true\"}\r\n                    control={<Radio />}\r\n                    label=\"Yes\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value={\"false\"}\r\n                    control={<Radio />}\r\n                    label=\"No\"\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </Grid>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              {newPaid === \"true\" ? (\r\n                <>\r\n                  <Grid item xs={12}>\r\n                    <KeyboardDatePicker\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Payment date\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      value={newSelectedPaymentDate}\r\n                      onChange={handlePaymentDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <KeyboardDatePicker\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Delivery date\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      value={newSelectedDeliveryDate}\r\n                      onChange={handleDeliveryDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </>\r\n              ) : (\r\n                <Grid item xs={12}>\r\n                  <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-dialog\"\r\n                    label=\"Delivery date\"\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={newSelectedDeliveryDate}\r\n                    onChange={handleDeliveryDateChange}\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              )}\r\n            </MuiPickersUtilsProvider>\r\n            <Grid item xs={12}>\r\n              <Button type=\"submit\" variant=\"outlined\">\r\n                Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedOrder: state.selectedOrder,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  closeModal: (openState) => dispatch(openModal(openState)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOrderForm);\r\n",{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":28},{"ruleId":"134","severity":1,"message":"138","line":1,"column":30,"nodeType":"136","messageId":"137","endLine":1,"endColumn":41},{"ruleId":"134","severity":1,"message":"139","line":124,"column":13,"nodeType":"136","messageId":"137","endLine":124,"endColumn":34},{"ruleId":"140","severity":1,"message":"141","line":124,"column":59,"nodeType":"142","messageId":"143","endLine":124,"endColumn":61},{"ruleId":"144","severity":1,"message":"145","line":129,"column":5,"nodeType":"146","messageId":"147","endLine":136,"endColumn":9},{"ruleId":"148","severity":1,"message":"149","line":24,"column":6,"nodeType":"150","endLine":24,"endColumn":8,"suggestions":"151"},{"ruleId":"134","severity":1,"message":"152","line":22,"column":8,"nodeType":"136","messageId":"137","endLine":22,"endColumn":22},{"ruleId":"134","severity":1,"message":"153","line":27,"column":3,"nodeType":"136","messageId":"137","endLine":27,"endColumn":23},{"ruleId":"130","replacedBy":"154"},{"ruleId":"132","replacedBy":"155"},{"ruleId":"134","severity":1,"message":"156","line":2,"column":8,"nodeType":"136","messageId":"137","endLine":2,"endColumn":17},{"ruleId":"134","severity":1,"message":"157","line":12,"column":16,"nodeType":"136","messageId":"137","endLine":12,"endColumn":22},{"ruleId":"134","severity":1,"message":"158","line":20,"column":10,"nodeType":"136","messageId":"137","endLine":20,"endColumn":14},{"ruleId":"134","severity":1,"message":"159","line":21,"column":8,"nodeType":"136","messageId":"137","endLine":21,"endColumn":19},{"ruleId":"148","severity":1,"message":"160","line":64,"column":6,"nodeType":"150","endLine":64,"endColumn":12,"suggestions":"161"},{"ruleId":"134","severity":1,"message":"162","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"157","line":12,"column":16,"nodeType":"136","messageId":"137","endLine":12,"endColumn":22},{"ruleId":"134","severity":1,"message":"163","line":18,"column":10,"nodeType":"136","messageId":"137","endLine":18,"endColumn":19},{"ruleId":"134","severity":1,"message":"158","line":20,"column":10,"nodeType":"136","messageId":"137","endLine":20,"endColumn":14},{"ruleId":"134","severity":1,"message":"164","line":20,"column":16,"nodeType":"136","messageId":"137","endLine":20,"endColumn":24},{"ruleId":"134","severity":1,"message":"159","line":21,"column":8,"nodeType":"136","messageId":"137","endLine":21,"endColumn":19},{"ruleId":"134","severity":1,"message":"165","line":27,"column":10,"nodeType":"136","messageId":"137","endLine":27,"endColumn":18},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'saveEditProductKey' is defined but never used.","Identifier","unusedVar","'selectOrder' is defined but never used.","'orderAfterEditProduct' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getOrders'. Either include it or remove the dependency array. If 'getOrders' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["168"],"'FilterListIcon' is defined but never used.","'closeAddProductModal' is defined but never used.",["166"],["167"],"'OrderForm' is defined but never used.","'uuidv4' is defined but never used.","'Link' is defined but never used.","'OrdersTable' is defined but never used.","React Hook useEffect has a missing dependency: 'pamentDateVisible'. Either include it or remove the dependency array. You can also do a functional update 'setPamentDateVisible(p => ...)' if you only need 'pamentDateVisible' in the 'setPamentDateVisible' call.",["169"],"'useEffect' is defined but never used.","'editOrder' is defined but never used.","'Redirect' is defined but never used.","'addOrder' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [getOrders]",{"range":"174","text":"175"},"Update the dependencies array to be: [paid, pamentDateVisible]",{"range":"176","text":"177"},[695,697],"[getOrders]",[2182,2188],"[paid, pamentDateVisible]"]